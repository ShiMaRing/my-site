server:
  port: 8089

spring:
  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    host: localhost
    # Redis服务器连接端口
    port: 6379
  shardingsphere:
    datasource:
      # 给每个数据源取别名，任意取
      names: master,slave
      # 配置主数据源数据库连接信息（只写）
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:4406/mydb?characterEncoding=utf-8&serverTimezone=GMT%2B8
        username: root
        password: 111
      # 配置从数据源数据库连接信息（只读）
      slave:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:5506/mydb?characterEncoding=utf-8&serverTimezone=GMT%2B8
        username: root
        password: 111
    masterslave:
      # 配置 slave 节点的负载均衡策略 ：轮询机制
      load-balance-algorithm-type: round_robin
      name: dataSource
      # 配置主库 ，负责数据的写入
      master-data-source-name: master
      # 配置从库
      slave-data-source-names: slave
      # 显示SQL
    props:
      sql:
        show: true
  main:
    allow-bean-definition-overriding: true
  thymeleaf:
    prefix: classpath:/templates/
    check-template-location: true
    suffix: .html
    encoding: UTF-8
    mode: LEGACYHTML5
    cache: false
  aop:
    auto: true
    proxy-target-class: true
  servlet:
    multipart:
      max-file-size: 10Mb
      max-request-size: 100Mb
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 5
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。      batch-size: 16384      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      group-id: test
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer


mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.xgs.model


#pagehelper
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
  returnPageInfo: check

logging:
  level:
    com.xgs.dao: WARN
    root: info


swagger:
  show: true

qiniu:
  accesskey: ""
  serectkey: ""
  bucket: ""
  cdn:
    url: ""